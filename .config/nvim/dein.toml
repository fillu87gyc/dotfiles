[[plugins]]
hook_add = '''
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_smartcase = 1

  " <Leader>f{char} to move to {char}
  nmap  <Leader>s <Plug>(easymotion-bd-f)
  vmap  <Leader>s <Plug>(easymotion-bd-f)

  " s{char}{char} to move to {char}{char}
  nmap <Leader><Leader>s <Plug>(easymotion-bd-f2)
  vmap <Leader><Leader>s <Plug>(easymotion-bd-f2)

  " Move to line
  nmap <Leader>j <Plug>(easymotion-bd-jk)
  vmap <Leader>j <Plug>(easymotion-bd-jk)
  nmap <Leader>k <Plug>(easymotion-bd-jk)
  vmap <Leader>k <Plug>(easymotion-bd-jk)
'''
repo = 'Lokaltog/vim-easymotion'

# Êã¨Âºß„ÅÆÂØæÂøúÈñ¢‰øÇ„ÇíË°®Á§∫
[[plugins]]
hook_add = '''
  let g:loaded_matchparen = 1
'''
repo = 'itchyny/vim-parenmatch'

[[plugins]]
hook_add = '''
  nmap <Leader>c  <Plug>(caw:hatpos:toggle)
  vmap <Leader>c  <Plug>(caw:hatpos:toggle)
  nmap <Leader>C  <Plug>(caw:hatpos:comment)
  nmap <Leader>U  <Plug>(caw:hatpos:uncomment)
  vmap <Leader>C  <Plug>(caw:hatpos:comment)
  vmap <Leader>U  <Plug>(caw:hatpos:uncomment)
'''
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'

[[plugins]]
repo = 'yonchu/accelerated-smooth-scroll'

[[plugins]]
build = './install --bin'
repo = 'junegunn/fzf'

[[plugins]]
depends = 'fzf'
hook_add = '''
  let g:fzf_layout = { 'up': '~60%' }
  
  let g:fzf_action = {
  \ 'Enter' : 'tab split',
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

  nnoremap ;f :Files!<CR>
  nnoremap ;t :Files!<CR>
  command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  nnoremap ;s :GFiles?<CR>

  nnoremap ;g :Rg<CR>
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --hidden '.shellescape(<q-args>), 1,
  \    fzf#vim#with_preview(), <bang>0)
'''
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
hook_add = '''
  nnoremap <silent> <Leader>i :IndentGuidesToggle<CR>
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
'''
repo = 'nathanaelkane/vim-indent-guides'

# LSP (Language Server Protocol)
[[plugins]]
hook_add = '''
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-peek-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> <C-j> <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_diagnostics_signs_enabled = 1
    let g:lsp_document_highlight_enabled = 1
    let g:lsp_document_code_action_signs_enabled = 1

    let g:lsp_format_sync_timeout = 1300
    autocmd! BufWritePre <buffer> call execute('LspDocumentFormatSync')
  endfunction

  augroup lsp_install
      au!
      " call s:on_lsp_buffer_enabled only for languages that has the server registered.
      autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
'''
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
hook_add = '''
  autocmd BufWritePre *.py Isort
'''
on_ft = ['python']
repo = 'fisadev/vim-isort'

# LSP settings
[[plugins]]
hook_add = '''
  " Enable flake8 and mypy
  let g:lsp_settings = {
  \  'pylsp-all': {
  \    'workspace_config': {
  \      'pylsp': {
  \        'configurationSources': ['flake8'],
  \        'plugins': {
  \          'pylsp_mypy': {
  \            'enabled': 1
  \          }
  \        }
  \      }
  \    }
  \  }
  \}
  let g:lsp_signs_hint = {'text': 'üí°'}
  let g:lsp_signs_error = {'text': '‚ùå'}
  let g:lsp_signs_warning = {'text': '‚ö†Ô∏è', 'icon': '/path/to/some/icon'}
  let g:lsp_diagnostics_signs_error            = {'text': '‚ùå'}
  let g:lsp_diagnostics_signs_warning          = {'text': '‚ö†Ô∏è'}
  let g:lsp_diagnostics_signs_information      = {'text': '‚ùì'}
  let g:lsp_diagnostics_signs_hint             = {'text': 'üí°'}
'''
hook_post_source = '''
  highlight link LspWarningHighlight Error
'''
repo = 'mattn/vim-lsp-settings'

# LSP-lightline bridge
[[plugins]]
repo = 'halkn/lightline-lsp'

# Auto completion
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

# Auto completion for LSP
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
hook_add = '''
  function! Fileformat() 
    return &buftype ==# 'terminal' || &filetype =~# 'denite\|tagbar' ? '' :
          \ winwidth(0) > 120 ? &fileformat . (exists('*WebDevIconsGetFileFormatSymbol') ? ' ' . WebDevIconsGetFileFormatSymbol() : '') : ''
  endfunction

  function! Filetype() 
    return &buftype ==# 'terminal' || &filetype =~# 'denite\|tagbar' ? '' :
          \ winwidth(0) > 120 ? (strlen(&filetype) ? &filetype . (exists('*WebDevIconsGetFileTypeSymbol') ? ' ' . WebDevIconsGetFileTypeSymbol() : '') : 'no ft') : ''
  endfunction

  function! Fileencoding() 
    return &buftype ==# 'terminal' || &filetype =~# 'denite\|tagbar' ? '' :
          \ winwidth(0) > 120 ? (strlen(&fileencoding) ? &fileencoding : &encoding) : ''
  endfunction

    let g:lightline = {
    \ 'active': {
    \     'left': [ [ 'mode', 'paste' ],
    \               [ 'readonly', 'filename', 'modified' ] ],
    \     'right':[ [ 'lineinfo' ],
    \               [ 'percent' ],
    \               [ 'fileformat', 'fileencoding', 'filetype' ],
    \               [ 'lsp_errors', 'lsp_warnings', 'lsp_ok'  ] ]
    \   },
    \  'component': {
    \    'readonly': 'Ôú† %R',
    \    'modified': '%m',
    \    'filename': ' ÔÉ∂ %t',
    \    'percent': 'ÓÇ°%3p%%',
    \    'lineinfo': 'Ô©∞%3l:%-2v'
    \  },
    \  'component_function': {
    \    'fileformat':   'Fileformat',
    \    'filetype':     'Filetype',
    \    'fileencoding': 'Fileencoding',
    \  },
    \ 'component_expand': {
    \   'lsp_warnings': 'lightline_lsp#warnings',
    \   'lsp_errors':   'lightline_lsp#errors',
    \   'lsp_ok':       'lightline_lsp#ok',
    \ },
    \ 'component_type': {
    \   'lsp_warnings': 'warning',
    \   'lsp_errors':   'error',
    \   'lsp_ok':       'middle',
    \ },
    \ }
'''
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
hook_add = '''
let g:python_style = 'google'
nmap df :Docstring<CR>
'''
repo = 'pixelneo/vim-python-docstring'

[[plugins]]
hook_post_source = '''
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  call ddc#custom#patch_global('sources', [
    \ 'around',
    \ 'vim-lsp',
    \ 'file',
    \ ])
  call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'matchers': ['matcher_head'],
    \   'sorters': ['sorter_rank'],
    \   'converters': ['converter_remove_overlap'],
    \ },
    \ 'around': {'mark': 'AROUND'},
    \ 'vim-lsp': {
    \   'mark': 'LSP', 
    \   'matchers': ['matcher_head'],
    \   'forceCompletionPattern': '\.|:|->|"\w+/*'
    \ },
    \ 'file': {
    \   'mark': 'FILE',
    \   'isVolatile': v:true, 
    \   'forceCompletionPattern': '\S/\S*'
    \ }
    \ })
'''
repo = 'Shougo/ddc.vim'
